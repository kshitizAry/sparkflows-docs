Integrating Analytical Apps with Jupyter
=========================

The Analytics App in Fire Insights empowers users to initiate the execution of a Notebook in Jupyter. The output generated by the Notebook is seamlessly displayed within the Analytical Apps interface. 

During the execution, Fire Insights passes two crucial parameters to the Notebook :

#. **Postback-URL:** A URL that facilitates communication and data exchange between Fire Insights and the Notebook.
#. **Job-ID:** An identifier used for tracking and managing the execution of the Notebook within Jupyter.

Add Wheel File to Your Jupyter Notebook
------------------

To leverage the Fire Insights API for data transmission, you need to add the wheel file to your Jupyter Notebook. 

This step enables smooth integration and data flow between Fire Insights and Jupyter.

`Click here <https://sparkflows-release.s3.amazonaws.com/fire/common/spark_3.2.1/fire_notebook-3.1.0-py3-none-any.whl>`_ to download the Wheel File.  

Output to Analytical Apps
----------------------------------

The Jupyter Notebook can output tables, charts, html etc. to be displayed in the Analytical Apps. To leverage the Fire Insights API for data transmission, you need to add the wheel file to your Jupyter Notebook. 

This step enables smooth integration and data flow between Fire Insights and Jupyter.

`Click here <https://sparkflows-release.s3.amazonaws.com/fire/common/spark_3.2.1/fire_notebook-3.1.0-py3-none-any.whl>`_ to download the Wheel File.  

Steps to output to Analytical Apps
---------------------

The Jupyter Notebook can produce a wide range of output formats, including texts, tables, charts, HTML code, and progress bars. 

These outputs can be seamlessly displayed in the analytical app interface, enhancing the user experience.

**Step 1 : Create a RestWorkflowContext Object**
+++++++++++++++++++++++++++++++++++++++++++

First create a RestWorkflowContext for communicating with Fire Insights server. Use the following code 
::

    jobId = dbutils.widgets.get("job-id")
    webserverURL = dbutils.widgets.get("postback-url")

    print(webserverURL)
    print(jobId)

    from fire_notebook.output.workflowcontext import RestWorkflowContext

    restworkflowcontext = RestWorkflowContext(webserverURL, jobId)

**Step 2 : Invoke the output functions**
+++++++++++++++++++++++++++++++++++++++

Fire Insights provides various output functions to present data effectively within the notebook. The following are some examples :

**Output as Text**
.................

To output text to Fire Insights, use the following code 
::

    restworkflowcontext.outStr(9, "Test String", text="text")


**Output PySpark DataFrame as Table**
...................................


To display the contents of a PySpark DataFrame as a table in Fire Insights, use the following code 
::
    
    from pyspark.sql.types import *

    schema = StructType([StructField("c1", DoubleType())\
                      ,StructField("c2", IntegerType())])
    test_list = [[0.0, 2], [1.0, 4], [2.0, 8], [3.0, 16], [4.0, 32], [5.0, 64], [6.0, 128]]
    df = spark.createDataFrame(test_list,schema=schema)
    restworkflowcontext.outDataFrame(9, "PySpark Dataframe", df)

    #To display 3 rows
    restworkflowcontext.outDataFrame(9, "PySpark Dataframe", df, 3)

**Note :** By deafult 10 rows will be displayed.

**Output Pandas DataFrame as Table**
..............


To showcase the contents of a Pandas DataFrame as a table in Fire Insights, use the following code 
::

    # list of strings
    lst = ['Geeks', 'For', 'Geeks', 'is',
           'portal', 'for', 'Geeks']

    # Calling DataFrame constructor on list
    df = pd.DataFrame(lst, columns=['name'])
    print(df)

    restworkflowcontext.outPandasDataframe(9, "Names", df)
    
    #To display 3 rows
    restworkflowcontext.outDataFrame(9, "Names", df, 3)

**Note :**  By deafult 10 rows will be displayed.

**Output as Charts**
...........

Output the chart in Fire Insights by selecting x & y column. It can display Column, Bar & Line chart types as outputs. 

To generate charts, use the following code 
::
    
    from pyspark.sql.types import *

    schema = StructType([StructField("c1", DoubleType())\
                      ,StructField("c2", IntegerType())])
    
    test_list = [[0.0, 2], [1.0, 4], [2.0, 8], [3.0, 16], [4.0, 32], [5.0, 64], [6.0, 128]]
    
    df = spark.createDataFrame(test_list,schema=schema)
    
    restworkflowcontext.outDataframeChart(title= "Example Chart", x_column = "c1", y_columns = ["c2"],
                                      chart_type ="LINECHART", df = df, numRowsToDisplay = 10)
 
 
**Output HTML**
.......


To display HTML code in Fire Insights, use the following code 
::
    
    htmlstr1 = "<h3>You can view HTML code in notebooks.</h3>"
 
    restworkflowcontext.outHTML(9, title="Example HTML", text = htmlstr1)
       
**Plotly with Fire Insights**
..........


To output Plotly visualizations to Fire Insights, use the following code 
::
    
    import plotly.graph_objs as go
    import plotly
    
    test = plotly.offline.plot([go.Scatter(x=[1, 2, 3], y=[3, 2, 6])], 
                     output_type='div', 
                    include_plotlyjs=False)
    example_plotly = f'{test}'
    
    restworkflowcontext.outPlotly(9, title="Example Plotly", text = example_plotly)
    
**Output Parameters**
..........

To display a list of values as output, use the following code 
::
    
    parameters = [("radio", "Industries", "Natural Resources, Construction, IT, Services, Finance, Real Estate, Others"), 
              ("checkbox", "Education, Position", "Graduate, Manager"),
              ("select", "Select country", "INDIA, USA, UK, Germany"),
              ("textarea", "Province", ""),
              ("text", "Region Code", ""),
             ]

    restworkflowcontext.outParameters(9, "Display Parameters In Dictionary To Table", parameters)

**Output Messages**
..........


This output is used by the Analytical App to show the Execution Status of the job. 

To indicate the execution status of the job, use the following code :


::

    message = "Sending the success message."
    
    restworkflowcontext.outSuccess(9, title="Success", text=message)
    
::

    message = "Sending the failure message."
    
    restworkflowcontext.outFailure(9, title="Failure", text=message)
    
::

    message = "Sending the running message."
    
    restworkflowcontext.outRunning(9, title="Running", text=message)
    
**Output Progress Message**
........


You can share the current progress of the Notebook run in percentage terms to the analytical app. This is useful to keep the user updated with the progress of the job execution.

To share the progress of the Notebook run as a percentage with the analytical app, use the following code :

::

    message = "50"
    
    restworkflowcontext.outputProgress(9, title="Progress", progress=message)


**Get Input Value**
.........

Analytical apps also allow us to pass a variable value as an input parameter to the notebook execution.

If a user doesnâ€™t enter a value within 120 seconds, it will return a default response.

To allow users to input a variable value as a parameter during Notebook execution, use the following code :

::

    title = "Name of the Country:"
   
    country_name = restworkflowcontext.getTextInput(9, title=title, url=webserverURL)
    

Conclusion
---------------------

By leveraging analytical apps, you can seamlessly interface your Jupyter Notebook with a user-friendly interface, catering to business and other project stakeholders' needs. 

The integration between Fire Insights and Jupyter enhances collaboration and improves data analysis capabilities.
   


