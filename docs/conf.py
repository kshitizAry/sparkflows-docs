#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Sparkflows documentation build configuration file, created by
# sphinx-quickstart on Sat Nov 18 23:43:48 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

import sphinx_rtd_theme

html_theme = "sphinx_rtd_theme"

html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
    "sphinx_rtd_theme",
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx_copybutton',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
    'sphinx.ext.autosectionlabel',
    'sphinx_panels'
    ]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Sparkflows'
copyright = '2021, Sparkflows Inc.'
author = 'Sparkflows'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '3.0'
# The full version, including alpha/beta/rc tags.
release = '3.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = [
'aws/admin-guide/deploy.rst',
'aws/admin-guide/deploy-aws.rst',
'aws/admin-guide/eks-configuration.rst',
'aws/admin-guide/installation-with-ami.rst',
'aws/glue-integration_prev.rst',
'aws/sparkflows-aws-setup.rst',
'azure/adls-integration.rst',
'azure/admin-guide/deploy-azure.rst',
'azure/databricks-integration-azure.rst',
'azure/hdinsight.rst',
'azure/running-on-standalone.rst',
'azure/service-principal.rst',
'cloudera-hadoop/mapr-specific-details.rst',
'commands/kubernetes.rst',
'databricks/admin-guide/azure-integration/index.rst',
'databricks/admin-guide/databricks-connection/index.rst',
'databricks/admin-guide/databricks-execute-workflow-json/index.rst',
'databricks/admin-guide/databricks-h20/index.rst',
'databricks/admin-guide/databricks-installation/index.rst',
'databricks/admin-guide/databricks-library/index.rst',
'databricks/admin-guide/databricks-prerequisites/index.rst',
'databricks/admin-guide/databricks-python-installation/index.rst',
'databricks/admin-guide/troubleshooting/index.rst',
'databricks/user-guide/databricks-aws-fire.rst',
'faq/00-installation.rst',
'hadoop/index.rst',
'installation/administration/user-administration.rst',
'installation/authentication/sso/saml-onelogin_backup.rst',
'installation/configuration/debugging-spark-cluster-connection.rst',
'installation/configuration/https/configuring-https-fire.rst',
'installation/configuration/pipeline/airflow-installation_v0.rst',
'jupyter-guide/analytics-app-end-to-end/create-notebook.rst',
'mlops/admin-guide/mlflow.rst',
'mlops/model_info.rst',
'mlops/model_security.rst',
'mlops/model_serving.rst',
'operations/health-check.rst',
'operations/installing-opennlp.rst',
'operations/restarting.rst',
'processors/index.rst',
'release-notes/2019-mar.rst',
'release-notes/upcoming.rst',
'rest-api/rest-api-authentication/python-token.rst',
'rest-api/rest-api-authentication/rest-api-postman-authorization-code.rst',    
'rest-api/rest-api-authentication/restapi-postman-password.rst',
'rest-api/rest-api-curl/more-workflow.rst',
'rest-api/rest-api-curl/more-workflow-execution.rst',
'rest-api/rest-api-reference/index.rst',
'superset/index.rst',
'troubleshooting.rst',
'troubleshooting/spark-emr.rst',
'tutorials/control-structures/assert.rst',
'tutorials/control-structures/index.rst',
'tutorials/data-engineering/books-recommendations.rst',
'tutorials/data-engineering/complex-data-preparation.rst',
'tutorials/data-engineering/data-preparation.rst',
'tutorials/data-engineering/feature-selection.rst',
'tutorials/data-engineering/who-data-cleaning.rst',
'tutorials/data-exploration/pivot.rst',
'tutorials/data-exploration/visualizations.rst',
'tutorials/data-science/sparkml/saving-loading-models.rst',
'tutorials/end-to-end/price-elasticity/data-cleaning.rst',
'tutorials/end-to-end/price-elasticity/reading-coefficients.rst',
'tutorials/nlp/index.rst',
'tutorials/rest-api/index.rst',
'user-guide/analytical-apps/data-science/data_science_analytical_app.rst',       
'user-guide/analytical-apps/gen-ai/content_generator_app.rst',
'user-guide/analytical-apps/gen-ai/content_synthesis_app.rst',
'user-guide/analytical-apps/gen-ai/conversational_app.rst',
'user-guide/analytical-apps/gen-ai/index.rst',
'user-guide/analytical-apps/gen-ai/natural_language_query_app.rst',
'user-guide/analytical-apps/index.rst',
'user-guide/concepts/machine-learning/index.rst',
'user-guide/concepts/pipelines/index.rst',
'user-guide/concepts/tesseract.rst',
'user-guide/concepts/visualizations/exporting-visuals.rst',
'user-guide/connectors/read-databricks.rst',
'user-guide/connectors/read-elasticsearch.rst',
'user-guide/connectors/read-salesforce.rst',
'user-guide/connectors/read-snowflake.rst',
'user-guide/connectors/salesforce-jdbc.rst',
'user-guide/connectors/save-mongodb.rst',
'user-guide/connectors/write-databricks.rst',
'user-guide/connectors/write-elasticsearch.rst',
'user-guide/connectors/write-salesforce.rst',
'user-guide/connectors/write-snowflake.rst',
'user-guide/machine-learning/model-serving/index.rst',
'user-guide/machine-learning/sparkml/feature-extraction.rst',
'user-guide/pipeline-development/node-list.rst',
'user-guide/python/pipe-python.rst',
'user-guide/reading-writing/read-unstructured.rst',
'user-guide/reading-writing/save-files.rst',
'user-guide/reading-writing/structured-files/orc.rst',
'user-guide/scheduler/cron-expressions.rst',
'user-guide/solutions/campaign_analytics_model_prediction.rst',
 'processors/01-InputOutput/index.rst',
'processors/02-Parse/index.rst',
'processors/03-Prepare/index.rst',
'processors/04-Filter/index.rst',
'processors/05-FeatureEngineering/index.rst',
'processors/05-JoinUnion/index.rst',
'processors/06-Group/index.rst',
'processors/07-Code/index.rst',
'processors/08-DataValidation/index.rst',
'processors/09-DataProfiling/index.rst',
'processors/10-Visualization/index.rst',
'processors/11-ML-FeatureSelection/index.rst',
'processors/11-ML-SparkML/index.rst',
'processors/12-ML-H2O/index.rst',
'processors/13-ML-AWSSagemaker/index.rst',
'processors/14-DL/index.rst',
'processors/14-ML-Sklearn/index.rst',
'processors/15-ML-TS/index.rst',
'processors/15-ScoreCardPy/index.rst',
'processors/15-Streaming/index.rst',
'processors/15-StructuredStreaming/index.rst',
'processors/16-Utilities/index.rst',
'processors/17-Documentation/index.rst',
'processors/18-OpenNLP/index.rst',
'processors/19-Deprecated/index.rst',
'processors/30-Serving/index.rst',
'processors/CustomProcessors/index.rst',
'processors/Delta/index.rst',
'processors/Great-Expectations/index.rst',
'processors/ML-Pycaret/index.rst',
'rest-api/rest-api-reference/Workflow-Execution.rst',
'rest-api/rest-api-reference/dataset.rst',
'rest-api/rest-api-reference/processor.rst',
'rest-api/rest-api-reference/workflow.rst',
'superset/connect-databricks.rst',
'superset/installation.rst',
'tutorials/control-structures/case-when.rst',
'tutorials/control-structures/count.rst',
'tutorials/control-structures/decision.rst',
'tutorials/control-structures/loop.rst',
'tutorials/nlp/namefinder.rst',
'tutorials/rest-api/infer-cluster-config.rst',
'user-guide/machine-learning/model-serving/scoring-with-workflows.rst',
'user-guide/machine-learning/model-serving/serving-h2-models.rst',
'user-guide/machine-learning/model-serving/serving-sagemaker-models.rst',        
'user-guide/machine-learning/model-serving/serving-scikit-learn-models.rst',     
'user-guide/machine-learning/model-serving/serving-sparkmllib-models.rst',       
'user-guide/machine-learning/model-serving/serving-tensorflow-models.rst',  
]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# https://sphinx-rtd-theme.readthedocs.io/en/stable/configuring.html#confval-sticky_navigation
html_theme_options = {'sticky_navigation': False, 'titles_only': True, 'collapse_navigation': False, 'display_version': False}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']
# html_context = {
#     'css_files': ['_static/custom.css'],
# }
html_js_files = [
    'js/theme.js',
]

def setup(app):
    # app.add_stylesheet('css/custom.css')
    app.add_css_file('css/custom_02.css')

html_logo = '_assets/logo.png';
# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Sparkflowsdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_engine = 'xelatex'

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Sparkflows.tex', 'Sparkflows Documentation',
     'Sparkflows', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'sparkflows', 'Sparkflows Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Sparkflows', 'Sparkflows Documentation',
     author, 'Sparkflows', 'One line description of project.',
     'Miscellaneous'),
]



# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']



# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}
